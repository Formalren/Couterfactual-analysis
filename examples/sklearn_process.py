# author:"flt"
# data:9/23/2024 8:09 PM
from sklearn import preprocessing

import pandas as pd

df = pd.read_csv('output_end1.csv')

X_train = df.to_numpy()
# X_train = np.array([[ 1., -1.,  2.],
#                     [ 2.,  0.,  0.],
#                     [ 0.,  1., -1.]])
# min_max_scaler = preprocessing.MinMaxScaler()
scaler = preprocessing.MinMaxScaler().fit(X_train)
X = scaler.transform(X_train)
df = pd.DataFrame(X)

# print(X)
# 将 DataFrame 保存到 CSV 文件
df.to_csv('output_narrow1dot5_new2.csv', index=False)
X_scaled = preprocessing.scale(X_train)
print('x')
#1/2取值
# X_test = [[0, 250, 0, 3, 1, 1, 5, 0, 0, 1, 5,
#            1, 0, 1, 5, 1, 1]]
# X_test1 = [[0.02, 350, 0.02, 4, 2, 1, 10, 0.02, 0.02, 2, 10,
#             1, 0.02, 2, 10, 100, 1]]
# X_test2 = [[0.04, 450, 0.04, 5, 3, 1, 15, 0.04, 0.04, 4, 15,
#             1, 0.04, 4, 15, 1, 1]]
# 1倍取值
# X_test = [[0,     500, 0, 5, 1, 1, 10, 0, 0, 1, 10,
#            1, 0, 1, 10, 1, 1]]
# X_test1 = [[0.04, 700, 0.04, 7, 2, 1, 20, 0.04, 0.04, 4, 20,
#             1, 0.04, 4, 20, 1, 1]]
# X_test2 = [[0.08, 900, 0.08, 9, 3, 1, 30, 0.08, 0.08, 8, 30,
#             1, 0.08, 8, 30, 1, 1]]
# 两边1.5倍取值
# X_test = [[-0.04, 350, -0.04, 3, 1, 1, 5, -0.04, -0.04, 1, 5,
#            1, -0.04, 1, 5, 1, 1]]
# X_test1 = [[0.06, 750, 0.06, 7, 3, 1, 30, 0.06, 0.06, 6, 20,
#             1, 0.06, 6, 20, 1, 1]]
# X_test2 = [[0.12, 1350, 0.12, 13.5, 5, 1, 45, 0.12, 0.12, 12, 45,
#             1, 0.12, 12, 45, 1, 1]]
# 两边2倍取值
# X_test = [[0, 250, 0, 2,-1,            1, 5,  0, -0.08, 0, 5,  1, 0, 0, 5, 1, 1]]
# X_test1 = [[0.08, 1000, 0.08, 10, 5,   1, 40, 0.08, 0.08, 8, 40,  1, 0.08, 8, 40, 1, 1]]
# X_test2 = [[0.16, 1800, 0.16, 18, 7,   1, 60, 0.16, 0.16, 16, 60, 1, 0.16, 16, 60, 1, 1]]
#两边2倍取值,删除部分原因
# X_test = [[0, 250, 0, 3, -1,            1, 5, 0, -0.08, 1, 5, 0, 0, 0, 5, -2, -2,
#             ]]
# X_test1 = [[0.04, 750, 0.04,  8,  2,    1, 22, 0.04, 0.04, 6, 22, 0.04, 0.04, 6, 22, 0.04, 0.04
#             ]]
# X_test2 = [[0.10, 1250, 0.10, 13, 4,    1, 40, 0.10, 0.10, 11, 40, 0.10, 0.10, 11, 40, 0.10, 0.10
#             ]]
# X_test3 = [[0.16, 1800, 0.16, 18, 6,    1, 60, 0.16, 0.16, 16, 60, 0.16, 0.16, 16, 60, 0.16, 0.16
#             ]]
# #两边2倍取值,删除大部分原因
# X_test = [[-0.08, 250, -0.08,  3,-1,    1, 5, -0.08,-0.08, 1,  5,  0,       0,   0,  5,  -2,   -2
#             ]]
# X_test1 = [[0.04, 750,  0.04,  8, 2,    1, 22, 0.04, 0.04, 6,  22, 0.04, 0.04,  6, 22, 0.04, 0.04
#             ]]
# X_test2 = [[0.10, 1250, 0.10, 13, 4,    1, 40, 0.10, 0.10, 11, 40, 0.10, 0.10, 11, 40, 0.10, 0.10
#             ]]
# X_test3 = [[0.16, 1800, 0.16, 18, 6,    1, 60, 0.16, 0.16, 16, 60, 0.16, 0.16, 16, 60, 0.16, 0.16
#             ]]
#两边2.5倍取值
# X_test = [[-0.1, 200, -0.1, 0, -2, 1, 4, -0.1, -0.1, 0, 4,
#            1, -0.1, 0, 4, 1, 1]]
# X_test1 = [[0.1, 1200, 0.1, 10, 5, 1, 50, 0.1, 0.1, 10, 50,
#             1, 0.1, 10, 50, 1, 1]]
# X_test2 = [[0.2, 2250, 0.2, 20, 7, 1, 100, 0.2, 0.2, 20, 100,
#             1, 0.2, 20, 100, 1, 1]]
#两边3倍取值
# X_test = [[-0.12, 160, -0.12, 1, -3, 1, 3, -0.12, -0.12, 0, 3,
#            1, -0.12, 0, 3, 1, 1]]
# X_test1 = [[0.12, 2100, 0.12, 14, 6, 1, 60, 0.12, 0.12, 12, 60,
#             1, 0.12, 12, 60, 1, 1]]
# X_test2 = [[0.24, 2700, 0.24, 27, 9, 1, 120, 0.24, 0.24, 24, 120,
#             1, 0.24, 24, 120, 1, 1]]
#两边4倍取值
# X_test = [[-0.16, 125, -0.16, 1, -4, 1, 2.5, -0.12, -0.12, 0, 2.5,
#            1, -0.16, 0, 2.5, 1, 1]]
# X_test1 = [[0.16, 2800, 0.16, 18, 8, 1, 80, 0.12, 0.12, 16, 80,
#             1, 0.16, 16, 80, 1, 1]]
# X_test2 = [[0.32, 3600, 0.32, 36, 12, 1, 160, 0.24, 0.24, 32, 160,
#             1, 0.32, 32, 160, 1, 1]]
#两边5倍取值
# X_test = [[-0.2, 100, -0.2, 1, -5, 1, 2, -0.2, -0.2, 0, 2,
#            1, -0.2, 0, 2, 1, 1]]
# X_test1 = [[0.2, 3500, 0.2, 23, 10, 1, 100, 0.2, 0.2, 20, 100,
#             1, 0.2, 20, 100, 1, 1]]
# X_test2 = [[0.4, 4500, 0.4, 45, 15, 1, 150, 0.4, 0.4, 40, 150,
#             1, 0.4, 40, 150, 1, 1]]
# X=scaler.transform(X_test)
# X1=scaler.transform(X_test1)
# X2=scaler.transform(X_test2)
# # X3=scaler.transform(X_test3)
# # 将数据转换为 DataFrame 并合并
# df_X = pd.DataFrame(X, columns=[f'X{i+1}' for i in range(X.shape[1])])
# df_X1 = pd.DataFrame(X1, columns=[f'X{i+1}' for i in range(X1.shape[1])])
# df_X2 = pd.DataFrame(X2, columns=[f'X{i+1}' for i in range(X2.shape[1])])
# # df_X3 = pd.DataFrame(X3, columns=[f'X{i+1}' for i in range(X3.shape[1])])
#
# # 添加一个标识列以区分不同的数据集
# df_X['Dataset'] = 'X'
# df_X1['Dataset'] = 'X1'
# df_X2['Dataset'] = 'X2'
# # df_X2['Dataset'] = 'X3'
#
# # 合并所有数据
# df_combined = pd.concat([df_X, df_X1, df_X2], ignore_index=True)
#
# # 输出到 CSV 文件
# df_combined.to_csv('combined_output1.csv', index=False)

# print(X)
# print(X1)
# print(X2)
# 将 numpy 数组转换为 DataFrame

